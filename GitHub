<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2016.1.2 (Build 209U)" ts="2017-05-08 15:01:36">
<Class name="Util.download">
<Super>%Persistent</Super>
<TimeChanged>64411,47661.637042</TimeChanged>
<TimeCreated>64408,58588.599028</TimeCreated>

<Method name="Update">
<ClassMethod>1</ClassMethod>
<FormalSpec>Owner:%String,Repository:%String,Branch:%String="",Username:%String,Password:%String,Namespace=$Namespace</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	write ! , Username
		write ! , Password
    Set req = ..CreateRequest(Username, Password)
    write !,req
    Set req.Location = "repos/" _ Owner _ "/" _ Repository _ "/contents"    // as described in https://developer.github.com/v3/repos/  
    Do:(Branch'="") req.SetParam("ref",Branch)                              // if omitted the repositoryâ€™s default branch (usually master) would be used
         write !,"coming"
    Set links = ##class(%ListOfDataTypes).%New()
    Set st = ..ProcessDirectory("",req,.links)
    write !,"coming1 "_$system.Status.DisplayError(st)
    Return:$$$ISERR(st) st
    write !,"coming2"     
    Set namespace = $Namespace
    Zn Namespace
    Set st = ..DownloadFiles(links,req,.list)
    Set st2 = $system.OBJ.CompileList(.list,"cuk /checkuptodate=expandedonly")
    Zn namespace
    WRITE !,st
    WRITE !,st2
     
    Return $$$ADDSC(st, st2)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/**
Process one directory of GitHub repository. Recursive.<br>
<b>Path</b> -Internal repository path. Root is empty string<br>
<b>Request</b> - Authenticated/Set %Net.HttpRequest object.<br>
<b>Links</b> - List of links to raw files (which satisfy <b>IsCacheFile</b> conditions) from repository.<br>
**/
]]></Content>
</UDLText>

<Method name="ProcessDirectory">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[Path:%String="",Request:%Net.HttpRequest,&Links:%ListOfDataTypes]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set location = Request.Location
    Set Request.Location = Request.Location _ Path
     
    Set st = Request.Get()
    Return:$$$ISERR(st) st
    Return:(Request.HttpResponse.StatusCode = 404) $$$ERROR($$$GeneralError,"Repository doesn't exist OR you don't have access")
    Return:((Request.HttpResponse.StatusCode = 403) || (Request.HttpResponse.GetHeader("X-RATELIMIT-REMAINING")=0)) $$$ERROR($$$GeneralError,"API rate limit exceeded. Try logging in.")
    Return:(Request.HttpResponse.StatusCode '= 200) $$$ERROR($$$GeneralError,"Received " _ Request.HttpResponse.StatusCode _ " expected 200")
     
    #dim objects As List of %ZEN.proxyObject
    #dim obj As %ZEN.proxyObject
    Set st = ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(Request.HttpResponse.Data,,.objects,1)
    Return:$$$ISERR(st) st
     
    For i = 1:1:objects.Count() {      
        Set obj = objects.GetAt(i)
        If (obj.type = "dir") {
            Set st = ..ProcessDirectory("/"_obj.name,Request,.Links)
            Return:$$$ISERR(st) st     
        } ElseIf (obj.type = "file") {
            Do:..IsCacheFile(obj) Links.Insert(obj."download_url")
        } Else {
            // obj.type = "symlink" or obj.type = "submodule"
        }
    }
    Set Request.Location = location // to keep track of where in the repository tree we are
    Return $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/**
Check that incoming file is the one you need.
**/
]]></Content>
</UDLText>

<Method name="IsCacheFile">
<ClassMethod>1</ClassMethod>
<FormalSpec>File:%ZEN.proxyObject</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
    Set extensions = ",xml,cls,csp,csr,mac,int,bas,inc,gbl,prj,obj,pkg,gof,"
    Return:($L(File.name,".")=1) 0 //no extension
    Set File.Extension = $P(File.name,".",$L(File.name,"."))
    Return $F(extensions,","_$ZCVT(File.Extension,"l")_",")
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/**
Download list of files on https://raw.githubusercontent.com/ server.<br>
<b>Links</b> - List of links to raw files.<br>
<b>Request</b> - Authenticated/Set %Net.HttpRequest object.<br>
<b>loadedlist</b> - Returns an array of the items loaded.
**/
]]></Content>
</UDLText>

<Method name="DownloadFiles">
<ClassMethod>1</ClassMethod>
<FormalSpec>Links:%ListOfDataTypes,Request:%Net.HttpRequest,*Items</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Kill Items
    Set Request.Server = "raw.githubusercontent.com"
    //Set Request.Server ="https://github.com/VVK23/test.git/"
    Set st = $$$OK
     
    For i = 1:1:Links.Count() {
        Set streq = Request.Get($e(Links.GetAt(i),35,*)) // Remove "https://raw.githubusercontent.com/" from URL.  
        Set:$$$ISERR(streq) st=$$$ADDSC(st, streq)
        Set stload = $system.OBJ.LoadStream(Request.HttpResponse.Data,"",.error,.items)
        Set:$$$ISERR(stload) st=$$$ADDSC(st, stload)
        Merge Items = items
    }
     
    Set Request.Server="api.github.com"
    Return st
]]></Implementation>
</Method>

<Method name="CreateRequest">
<ClassMethod>1</ClassMethod>
<FormalSpec>Username:%String="",Password:%String=""</FormalSpec>
<ReturnType>%Net.HttpRequest</ReturnType>
<Implementation><![CDATA[
    Set namespace = $Namespace
    Set SSLConfig = "GitHub"
     
    Zn "%SYS"
    Do:'##class(Security.SSLConfigs).Exists(SSLConfig) ##class(Security.SSLConfigs).Create(SSLConfig)
    Zn namespace
 
    Set req=##class(%Net.HttpRequest).%New()
    Set req.Https=1
    Set req.SSLConfiguration=SSLConfig
    Set req.Server="api.github.com"                        
    Do req.SetHeader("Accept","application/vnd.github.v3+json")             // we want 3rd version of api  
     
    If ((Username="") || (Password="")) {   // supply Username and Password, if both are provided. GitHub accept Basic Auth
        Set req.Username = Username                                         // https://developer.github.com/v3/auth/
        Set req.Password = Password
    }  
 
    Return req
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// See more at: http://code.intersystems.com/code/Code.View.Code.cls?ID=877&title=download-github-repository-into-cach-#sthash.znn3qh8W.dpuf

]]></Content>
</UDLText>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Util.downloadD</DataLocation>
<DefaultData>downloadDefaultData</DefaultData>
<IdLocation>^Util.downloadD</IdLocation>
<IndexLocation>^Util.downloadI</IndexLocation>
<StreamLocation>^Util.downloadS</StreamLocation>
<Data name="downloadDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
